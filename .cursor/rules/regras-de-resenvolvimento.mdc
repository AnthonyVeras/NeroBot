---
description: 
globs: 
alwaysApply: true
---
# NeroBot - Regras de Desenvolvimento

## Visão Geral do Projeto
NeroBot é um bot multifuncional para WhatsApp, migrado de JavaScript para TypeScript, mantendo todas as funcionalidades originais com a adição de tipagem estática.

## Tecnologias e Dependências
- TypeScript 5.x
- Baileys (API WhatsApp)
- Node.js v16+
- Outras bibliotecas: @cacheable/node-cache, axios, pino, etc.

## Diretrizes Gerais

### Estrutura do Código
- Mantenha a estrutura de diretórios original para facilitar a migração
- Arquivos TypeScript devem usar a extensão `.ts`
- Classes de erro devem ser exportadas corretamente
- Trate a variável global BASE_DIR corretamente conforme a estrutura do projeto

### TypeScript

#### Boas Práticas
- Sempre use tipagem explícita em APIs públicas e interfaces
- Use inferência de tipos somente para variáveis locais quando o tipo for óbvio
- Utilize `interface` para definições de API e `type` para unions e types mais complexos
- Prefira `readonly` para arrays e propriedades que não devem ser modificadas
- Evite o uso de `any`, preferindo `unknown` quando necessário
- Use genéricos para funções e métodos reutilizáveis
- Implemente `Object.setPrototypeOf` em classes de erro para corrigir herança em TypeScript

#### Convenções de Nomenclatura
- Use `camelCase` para variáveis, funções e propriedades
- Use `PascalCase` para classes, interfaces e tipos
- Use `UPPER_SNAKE_CASE` para constantes
- Use sufixo `Interface` ou prefixo `I` para interfaces (opcional, mas seja consistente)

### Comandos do Bot

#### Criação de Comandos
- Coloque comandos na pasta correta com base em permissões (`admin`, `member`, `owner`)
- Siga a estrutura padrão de comandos conforme os exemplos existentes
- Implemente tipagem completa para os parâmetros e retornos
- Validação adequada de parâmetros é obrigatória
- Use classes de erro apropriadas para tratamento de erros
- Documente os comandos com JSDoc


### Integração com Baileys

- Assegure a tipagem correta para objetos e eventos da API Baileys
- Mantenha a compatibilidade com a versão atual do Baileys
- Para eventos complexos, crie interfaces específicas
- Ao lidar com mensagens, certifique-se de validar a presença de todos os campos antes de acessá-los
- Implemente tratamento adequado de erros para operações de rede

### Logs e Depuração

- Logs temporários devem ser claramente marcados:
  ```typescript
  // LOG TEMPORÁRIO: Remover após migração completa
  console.log('Verificando tipo da mensagem:', message.type);
  ```
- Mantenha os mesmos outputs de terminal do código original
- Registre erros importantes com detalhes suficientes para depuração

### Testes

- Escreva testes para verificar se a funcionalidade permanece a mesma após a migração
- Isole componentes para testes unitários quando possível
- Use mocks para serviços externos e Baileys API em testes

### Migração

- Sempre preserve o comportamento original das funções
- Nunca altere a lógica de negócios durante a migração para TypeScript
- Declare interfaces para estruturas de dados existentes
- Mova gradualmente os arquivos, testando cada componente após a migração

## Considerações de Identidade Visual

- Substitua todas as referências ao nome "Takeshi" por "Nero"
- Cores: onde havia azul, use vermelho
- Remova referências à API Spider, que não será mais utilizada

## Observações Finais

- A prioridade é garantir a compatibilidade funcional com a versão JavaScript original
- Mantenha o código limpo e bem documentado
- Lembre-se que o objetivo é melhorar a manutenibilidade sem mudar o comportamento 